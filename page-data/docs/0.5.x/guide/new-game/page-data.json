{"componentChunkName":"component---src-components-doc-page-js","path":"/docs/0.5.x/guide/new-game","webpackCompilationHash":"","result":{"data":{"file":{"children":[{"__typename":"MarkdownRemark","html":"<p>[TOC]</p>\n<h2>Creating the Rojo Project</h2>\n<p>To use Rojo to build a game, you'll need to create a new project file, which tells Rojo how to turn your files into a Roblox place.</p>\n<p>First, create a new folder to contain the files for your game and open up a new terminal inside of it, like cmd.exe or Bash.</p>\n<p>It's convenient to make the folder from the command line:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">mkdir my-new-project\ncd my-new-project</code></pre></div>\n<p>Inside the folder, initialize a new Rojo project:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">rojo init</code></pre></div>\n<p>Rojo will make a small project file in your directory, named <code class=\"language-text\">default.project.json</code>. It matches the \"Baseplate\" template from Roblox Studio, except that it'll take any files you put in a folder called <code class=\"language-text\">src</code> and put it into <code class=\"language-text\">ReplicatedStorage.Source</code>.</p>\n<p>Speaking of files, make sure to create a directory named <code class=\"language-text\">src</code> in this folder, or Rojo will be upset about missing files!</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">mkdir src</code></pre></div>\n<p>Let's also add a Lua file, <code class=\"language-text\">hello.lua</code> to the <code class=\"language-text\">src</code> folder, so that we can make this project our own.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">echo &#39;return &quot;Hello, Rojo!&quot;&#39; &gt; src/hello.lua</code></pre></div>\n<h2>Building Your Place</h2>\n<p>Now that we have a project, one thing we can do is build a Roblox place file for our project. This is a great way to get started with a project quickly with no fuss.</p>\n<p>All we have to do is call <code class=\"language-text\">rojo build</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">rojo build -o MyNewProject.rbxlx</code></pre></div>\n<p>If you open <code class=\"language-text\">MyNewProject.rbxlx</code> in Roblox Studio now, you should see a <code class=\"language-text\">Folder</code> containing a <code class=\"language-text\">ModuleScript</code> under <code class=\"language-text\">ReplicatedStorage</code>!</p>\n<p>!!! info\nTo generate a binary place file instead, use <code class=\"language-text\">rbxl</code>. Note that support for binary model/place files (<code class=\"language-text\">rbxm</code> and <code class=\"language-text\">rbxl</code>) is very limited in Rojo presently.</p>\n<h2>Live-Syncing into Studio</h2>\n<p>Building a place file is great for starting to work on a game, but for active iteration, you'll want something faster.</p>\n<p>In Roblox Studio, make sure the Rojo plugin is installed. If you need it, check out <a href=\"installation\">the installation guide</a> to learn how to install it.</p>\n<p>To expose your project to the plugin, you'll need to start a new <strong>live sync session</strong> from the command line:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">rojo serve</code></pre></div>\n<p>You should see output like this in your terminal:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ rojo serve\nRojo server listening on port 34872</code></pre></div>\n<p>Switch into Roblox Studio and press the <strong>Connect</strong> button on the Rojo plugin toolbar. A dialog should appear:</p>\n<p><img src=\"../images/connection-dialog.png\" alt=\"Rojo plugin connection dialog\">\n{: class=\"feature-image\" align=\"center\" }</p>\n<p>If the port number doesn't match the output from the command line, change it, and then press <strong>Connect</strong>.</p>\n<p>If all went well, you should now be able to change files in the <code class=\"language-text\">src</code> directory and watch them sync into Roblox Studio in real time!</p>\n<h2>Uploading Your Place</h2>\n<p>Aimed at teams that want serious levels of automation, Rojo can upload places to Roblox.com automatically.</p>\n<p>You'll need an existing game on Roblox.com as well as the <code class=\"language-text\">.ROBLOSECURITY</code> cookie of an account that has write access to that game.</p>\n<p>!!! warning\nIt's recommended that you set up a Roblox account dedicated to deploying your game instead of your personal account in case your security cookie is compromised.</p>\n<p>Generating and publishing your game is as simple as:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">rojo upload --asset_id [PLACE ID] --cookie &quot;[SECURITY COOKIE]&quot;</code></pre></div>\n<p>An example project is available on GitHub that deploys to Roblox.com from GitHub and Travis-CI automatically: <a href=\"https://github.com/LPGhatguy/roads\">https://github.com/LPGhatguy/roads</a></p>"}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"contentPath":"0.5.x/guide/new-game.md","title":"Creating a Game with Rojo"}}}