{"componentChunkName":"component---src-components-doc-page-js","path":"/0.5.x/guide/migrating-to-epiphany.md","webpackCompilationHash":"","result":{"data":{"file":{"children":[{"__typename":"MarkdownRemark","html":"<p>Rojo underwent a large refactor during most of 2018 to enable a bunch of new features and lay groundwork for lots more in 2019. As such, Rojo <strong>0.5.x</strong> projects are not compatible with Rojo <strong>0.4.x</strong> projects.</p>\n<p>[TOC]</p>\n<h2>Supporting Both 0.4.x and 0.5.x</h2>\n<p>Rojo 0.5.x uses a different name for its project format. While 0.4.x used <code class=\"language-text\">rojo.json</code>, 0.5.x uses <code class=\"language-text\">default.project.json</code>, which allows them to coexist.</p>\n<p>If you aren't sure about upgrading or want to upgrade gradually, it's possible to keep both files in the same project without causing problems.</p>\n<h2>Upgrading Your Project File</h2>\n<p>Project files in 0.5.x are more explicit and flexible than they were in 0.4.x. Project files can now describe models and plugins in addition to places.</p>\n<p>This new project file format also guards against two of the biggest pitfalls when writing a config file:</p>\n<ul>\n<li>Using a service as a partition target directly, which often wiped away extra instances</li>\n<li>Defining two partitions that overlapped, which made Rojo act unpredictably</li>\n</ul>\n<p>The biggest change is that the <code class=\"language-text\">partitions</code> field has been replaced with a new field, <code class=\"language-text\">tree</code>, that describes the entire hierarchy of your project from the top-down.</p>\n<p>A project for 0.4.x that syncs from the <code class=\"language-text\">src</code> directory into <code class=\"language-text\">ReplicatedStorage.Source</code> would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Rojo 0.4.x Example\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"partitions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ReplicatedStorage.Source\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In 0.5.x, the project format is more explicit:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Rojo 0.5.x Example\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"tree\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"$className\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DataModel\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"ReplicatedStorage\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"$className\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ReplicatedStorage\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"Source\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"$path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For each object in the tree, we define <em>metadata</em> and <em>children</em>.</p>\n<p>Metadata begins with a dollar sign (<code class=\"language-text\">$</code>), like <code class=\"language-text\">$className</code>. This is so that children and metadata can coexist without creating too many nested layers.</p>\n<p>All other values are considered children, where the key is the instance's name, and the value is an object, repeating the process.</p>\n<h2>Migrating Unknown Files</h2>\n<p>If you used Rojo to sync in files as <code class=\"language-text\">StringValue</code> objects, you'll need to make sure those files end with the <code class=\"language-text\">txt</code> extension to preserve this in Rojo 0.5.x.</p>\n<p>Unknown files are now ignored in Rojo instead of being converted to <code class=\"language-text\">StringValue</code> objects.</p>"}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"sourcePath":"0.5.x/guide/migrating-to-epiphany.md","title":"Migrating from 0.4.x to 0.5.x"}}}