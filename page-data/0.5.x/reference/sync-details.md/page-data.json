{"componentChunkName":"component---src-components-doc-page-js","path":"/0.5.x/reference/sync-details.md","webpackCompilationHash":"","result":{"data":{"file":{"children":[{"__typename":"MarkdownRemark","html":"<p>This page aims to describe how Rojo turns files on the filesystem into Roblox objects.</p>\n<p>[TOC]</p>\n<h2>Overview</h2>\n<table>\n<thead>\n<tr>\n<th>File Name</th>\n<th>Instance Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>any directory</td>\n<td><code class=\"language-text\">Folder</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">*.server.lua</code></td>\n<td><code class=\"language-text\">Script</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">*.client.lua</code></td>\n<td><code class=\"language-text\">LocalScript</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">*.lua</code></td>\n<td><code class=\"language-text\">ModuleScript</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">*.csv</code></td>\n<td><code class=\"language-text\">LocalizationTable</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">*.txt</code></td>\n<td><code class=\"language-text\">StringValue</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">*.model.json</code></td>\n<td>Any</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">*.rbxm</code></td>\n<td>Any</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">*.rbxmx</code></td>\n<td>Any</td>\n</tr>\n</tbody>\n</table>\n<h2>Limitations</h2>\n<p>Not all property types can be synced by Rojo in real-time due to limitations of the Roblox Studio plugin API. In these cases, you can usually generate a place file and open it when you start working on a project.</p>\n<p>Some common cases you might hit are:</p>\n<ul>\n<li>Binary data (Terrain, CSG, CollectionService tags)</li>\n<li><code class=\"language-text\">MeshPart.MeshId</code></li>\n<li><code class=\"language-text\">HttpService.HttpEnabled</code></li>\n</ul>\n<p>For a list of all property types that Rojo can reason about, both when live-syncing and when building place files, look at <a href=\"https://github.com/LPGhatguy/rbx-tree#property-type-coverage\">rbx_tree's type coverage chart</a>.</p>\n<h2>Folders</h2>\n<p>Any directory on the filesystem will turn into a <code class=\"language-text\">Folder</code> instance unless it contains an 'init' script, described below.</p>\n<h2>Scripts</h2>\n<p>The default script type in Rojo projects is <code class=\"language-text\">ModuleScript</code>, since most scripts in well-structued Roblox projects will be modules.</p>\n<p>If a directory contains a file named <code class=\"language-text\">init.server.lua</code>, <code class=\"language-text\">init.client.lua</code>, or <code class=\"language-text\">init.lua</code>, that folder will be transformed into a <code class=\"language-text\">*Script</code> instance with the contents of the 'init' file. This can be used to create scripts inside of scripts.</p>\n<p>For example, these files:</p>\n<p><img src=\"../images/sync-example-files.svg\" alt=\"Tree of files on disk\">\n{: align=\"center\" }</p>\n<p>Will turn into these instances in Roblox:</p>\n<p><img src=\"../images/sync-example-instances.svg\" alt=\"Tree of instances in Roblox\">\n{: align=\"center\" }</p>\n<h2>Localization Tables</h2>\n<p>Any CSV files are transformed into <code class=\"language-text\">LocalizationTable</code> instances. Rojo expects these files to follow the same format that Roblox does when importing and exporting localization information.</p>\n<h2>Plain Text Files</h2>\n<p>Plain text files (<code class=\"language-text\">.txt</code>) files are transformed into <code class=\"language-text\">StringValue</code> instances. This is useful for bringing in text data that can be read by scripts at runtime.</p>\n<h2>JSON Models</h2>\n<p>Files ending in <code class=\"language-text\">.model.json</code> can be used to describe simple models. They're designed to be hand-written and are useful for instances like <code class=\"language-text\">RemoteEvent</code>.</p>\n<p>A JSON model describing a folder containing a <code class=\"language-text\">Part</code> and a <code class=\"language-text\">RemoteEvent</code> could be described as:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"My Cool Model\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ClassName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Folder\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Children\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"Name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"RootPart\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"ClassName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Part\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"Properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"Size\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Vector3\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"Value\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"Name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SendMoney\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"ClassName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"RemoteEvent\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It would turn into instances in this shape:</p>\n<p><img src=\"../images/sync-example-json-model.svg\" alt=\"Tree of instances in Roblox\">\n{: align=\"center\" }</p>\n<h2>Binary and XML Models</h2>\n<p>Rojo supports both binary (<code class=\"language-text\">.rbxm</code>) and XML (<code class=\"language-text\">.rbxmx</code>) models generated by Roblox Studio or another tool.</p>\n<p>Support for the <code class=\"language-text\">rbxmx</code> is very good, while support for <code class=\"language-text\">rbxm</code> is still very early, buggy, and lacking features.</p>\n<p>For a rundown of supported types, check out <a href=\"https://github.com/LPGhatguy/rbx-dom#property-type-coverage\">rbx-dom's type coverage chart</a>.</p>"}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"sourcePath":"0.5.x/reference/sync-details.md","title":"Sync Details"}}}